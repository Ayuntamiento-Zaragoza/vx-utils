#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Copyright (c) 2013 Jose Antonio Chavarría
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jose Antonio Chavarría <jachavar@gmail.com>

__author__ = 'Jose Antonio Chavarría'

import argparse
import os
import sys
import errno
import fileinput

def parse_args():
    parser = argparse.ArgumentParser(
        description='Replace a variable value in a configuration file (all occurrences)',
        epilog='Vitalinux utility'
    )

    parser.add_argument(
        '-k', '--key',
        action='store',
        help='key to replace in file',
        required=True
    )

    parser.add_argument(
        '-v', '--value',
        action='store',
        help='new value to key',
        required=True
    )

    parser.add_argument(
        '-f', '--file',
        action='store',
        help='file to search',
        required=True
    )

    parser.add_argument(
        '-s', '--separator',
        action='store',
        help='character separator between key and value ("=" by default)',
        default='=',
        choices=' =:'
    )

    parser.add_argument(
        '-a', '--append',
        action='store_true',
        help='append key and value to the end of file (if not exists)'
    )

    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='enable silence mode (no verbose)'
    )

    return vars(parser.parse_args())

def run():
    args = parse_args()

    if not os.path.isfile(args['file']):
        if not args['quiet']:
            print('File "%s" not found' % args['file'])
        sys.exit(errno.ENOENT)

    new_line = '%s%s%s' % (
        args['key'],
        args['separator'],
        args['value']
    )

    # find all occurrences!!!
    changed = False
    for line in fileinput.input(args['file'], inplace=1):
        if line.startswith(args['key']) and args['separator'] in line:
            print(line.replace(line, new_line))
            changed = True
        else:
            print(line.strip())

    fileinput.close()

    if changed:
        if not args['quiet']:
            print('Key value replaced!!!')
        sys.exit(os.EX_OK)  # no error

    # key not found, append to the end of file?
    f = None
    if args['append']:
        try:
            f = open(args['file'], 'a')
            f.write('%s%s' % (new_line, '\n'))
            f.close()
            if not args['quiet']:
                print('Key and value appended to the end of file')
        except IOError:
            if not args['quiet']:
                print('Error writting to file')
            sys.exit(errno.EPERM)  # error writting to file
        except:
            pass
        finally:
            if f is not None:
                f.close()

        sys.exit(os.EX_OK)  # no error

    if not args['quiet']:
        print('Key not found')
    sys.exit(errno.ENODATA)

if __name__ == '__main__':
    run()

#!/usr/bin/python3
# -*- coding: UTF-8 -*-

# Copyright (c) 2017-2020 Jose Antonio Chavarría <jachavar@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import pwd
import errno
import argparse

import vx_lib as vx

__author__ = 'Jose Antonio Chavarría'


def parse_args():
    parser = argparse.ArgumentParser(
        description='DConf wrapper for insert/remove elements in relocatable schemas',
        epilog='Vitalinux utility'
    )

    action = parser.add_mutually_exclusive_group(required=True)
    action.add_argument(
        '-i', '--insert',
        action='store_true',
        help='insert values to key'
    )
    action.add_argument(
        '-r', '--remove',
        action='store_true',
        help='remove values from key'
    )

    parser.add_argument(
        "schema",
        help="gsettings shema",
        metavar="SCHEMA"
    )

    parser.add_argument(
        "key",
        help="gsettings key",
        metavar="KEY"
    )

    parser.add_argument(
        "value",
        help="gsettings VALUE(s) to add to the KEY array",
        metavar="VALUE",
        nargs='+'
    )

    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='enable silence mode (no verbose)'
    )

    return vars(parser.parse_args())


def change_setting(args, user, current_user=False):
    if current_user:
        cmd = 'gsettings get {} {}'.format(args['schema'], args['key'])
    else:
        cmd = 'su -c "gsettings get {} {}" {}'.format(
            args['schema'],
            args['key'],
            user
        )
    _, array, _ = vx.execute(cmd, interactive=False)
    if '@' in array:
        array = eval(''.join(array.split()[1:]))
    else:
        array = eval(array)

    if args['insert']:
        for v in args['value']:
            if v not in array:
                array.append(v)
    else:  # remove values
        for v in args['value']:
            if v in array:
                array.remove(v)

    if current_user:
        cmd = 'gsettings set {} {} \"{}\"'.format(
            args['schema'],
            args['key'],
            str(array)
        )
    else:
        cmd = 'su -c "gsettings set {} {} \\\"{}\\\"" {}'.format(
            args['schema'], args['key'], str(array),
            user
        )

    if not args['quiet']:
        print('User {}: value {}'.format(user, array))

    ret, _, error = vx.execute(cmd, interactive=False)
    if ret != 0 and not args['quiet']:
        print('User {} not changed. Error: {}'.format(user, error))

    return ret


def run():
    args = parse_args()

    cmd = 'gsettings list-relocatable-schemas | grep --quiet {}'.format(
        args['schema']
    )
    ret, _, _ = vx.execute(cmd, interactive=False)
    if ret != 0:
        if not args['quiet']:
            print('Schema not relocatable')
        sys.exit(errno.EPERM)  # operation not allowed

    if vx.user_is_root():
        for item in pwd.getpwall():
            if os.path.exists(os.path.join(item.pw_dir, '.profile')):
                if change_setting(args, item.pw_name) != 0:
                    sys.exit(errno.ENOEXEC)
    else:  # current user is normal user
        if change_setting(args, os.environ.get('USER'), current_user=True) != 0:
            sys.exit(errno.ENOEXEC)

    vx.execute('dconf update', interactive=False)


if __name__ == '__main__':
    run()

#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# Copyright (c) 2013 Jose Antonio Chavarría
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Jose Antonio Chavarría <jachavar@gmail.com>

__author__ = 'Jose Antonio Chavarría'

import argparse
import os
import sys
import errno
import shutil

BACKUP_EXT = '.vxsaved'
CHANGE_EXT = '.vx'


def parse_args():
    parser = argparse.ArgumentParser(
        description='Perform operations with files generated by other packages',
        epilog='Vitalinux utility'
    )

    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='enable silence mode (no verbose)'
    )

    group_operation = parser.add_mutually_exclusive_group(required=True)

    group_operation.add_argument(
        '-b', '--backup',
        action='store_true',
        help='copy file to file%s' % BACKUP_EXT
    )

    group_operation.add_argument(
        '-c', '--change',
        action='store_true',
        help='move file%s to file' % CHANGE_EXT
    )

    group_operation.add_argument(
        '-r', '--restore',
        action='store_true',
        help='move file%s to file' % BACKUP_EXT
    )

    parser.add_argument(
        'file',
        action='store',
        help='file to perform the action'
    )

    return vars(parser.parse_args())


def file_backup(archive, verbose=False):
    if not os.path.isfile(archive):
        if verbose:
            print('File "%s" not found' % archive)
        sys.exit(errno.ENOENT)

    target = '%s%s' % (archive, BACKUP_EXT)
    if not os.path.isfile(target):
        try:
            shutil.copyfile(archive, target)
        except:
            if verbose:
                print('I/O error')
            sys.exit(errno.EIO)
    else:
        if verbose:
            print('%s already exists' % target)


def file_move(source, target, verbose=False):
    if not os.path.isfile(source):
        if verbose:
            print('File "%s" not found' % source)
        sys.exit(errno.ENOENT)

    try:
        shutil.move(source, target)
    except:
        if verbose:
            print('Error moving file %s to %s' % (source, target))
        sys.exit(errno.EIO)


def run():
    args = parse_args()

    if args['backup']:
        file_backup(args['file'], verbose=not args['quiet'])
    elif args['change']:
        file_move(
            '%s%s' % (args['file'], CHANGE_EXT),
            args['file'],
            verbose=not args['quiet']
        )
    elif args['restore']:
        file_move(
            '%s%s' % (args['file'], BACKUP_EXT),
            args['file'],
            verbose=not args['quiet']
        )

    sys.exit(os.EX_OK)  # no error

if __name__ == '__main__':
    run()
